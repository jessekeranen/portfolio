package portfolio.test;
// Generated by ComTest BEGIN
import java.util.Arrays;
import java.io.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFRow;
import portfolio.Company;
import portfolio.Portfolio;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import static org.junit.Assert.*;
import org.junit.*;
import portfolio.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.09.23 16:16:06 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class PortfolioTest {


  // Generated by ComTest BEGIN  // Portfolio: 10

  private Company Nokia; 
  private Company Nordea; 
  private Company Telia; 

  private Portfolio portfolio; 
  public double[] portfolioMarketValue; 

  public void addData(String filename, String name, double multiplier, XSSFWorkbook workbook, XSSFSheet sheet, XSSFSheet sheet2, XSSFSheet sheet3, XSSFSheet sheet4) {

  addData(name, sheet, multiplier, false, 1); 
  addData(name, sheet2, multiplier, false, 100); 
  addData(name, sheet3, multiplier, true, 1); 
  addData(name, sheet4, multiplier, false, 0.01); 

   try{
   FileOutputStream fileOut = new FileOutputStream(filename); 
   workbook.write(fileOut); 
   fileOut.close(); 
   }catch( Exception e) {
        System.err.println(e.getMessage()); 
   }
  }

  public void addData(String name, XSSFSheet sheet, double multiplier, boolean bookvalue, double coefficient) {
  XSSFRow row = sheet.createRow(0); 
  row.createCell(0).setCellValue(name); 
  for(int i = 1; i < 13; i++){
       row = sheet.createRow(i); 
       if(bookvalue == false){
           row.createCell(0).setCellValue((i*11.5*multiplier+i-(i*i))*coefficient); 
       }
       else{
           row.createCell(0).setCellValue(i*400.05+1000/multiplier-i*i); 
       }
   }
  }

   public void exampleCompanies(){
  String filename = "/Users/jessekeranen/CompanyTest.xlsx" ; 
  XSSFWorkbook workbook = new XSSFWorkbook(); 
  XSSFSheet sheet = workbook.createSheet("Prices"); 
  XSSFSheet sheet2 = workbook.createSheet("MarketValues"); 
  XSSFSheet sheet3 = workbook.createSheet("BookValues"); 
  XSSFSheet sheet4 = workbook.createSheet("Dividends"); 

       addData(filename, "Nokia", 1, workbook, sheet, sheet2, sheet3, sheet4); 
       Nokia = new Company(sheet, sheet3, sheet2, sheet4, 0); 
       addData(filename, "Nordea", 2, workbook, sheet, sheet2, sheet3, sheet4); 
       Nordea = new Company(sheet, sheet3, sheet2, sheet4, 0); 
       addData(filename, "Telia", 1.5, workbook, sheet, sheet2, sheet3, sheet4); 
       Telia = new Company(sheet, sheet3, sheet2, sheet4, 0); 

       try{
           workbook.close(); 
       }catch( Exception e) {
           System.err.println(e.getMessage()); 
       }
       portfolio = new Portfolio(1,1); 

       portfolio.addCompany(Nokia); 
       portfolio.addCompany(Nordea); 
       portfolio.addCompany(Telia); 

       portfolio.portfolioMarketValue(0); 
       portfolio.portfolioReturn(0); 
  }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAddCompany126 */
  @Test
  public void testAddCompany126() {    // Portfolio: 126
    exampleCompanies(); 
    int count = portfolio.companies.size(); 
    assertEquals("From: Portfolio line: 129", 3, count); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPortfolioReturn140 
   * @throws Exception when error
   */
  @Test
  public void testPortfolioReturn140() throws Exception {    // Portfolio: 140
    exampleCompanies(); 
    double[] array = portfolio.portfolioReturns; 
    DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US); 
    DecimalFormat decimalFormat = new DecimalFormat("0.00", symbols); 
    for (int i = 0; i < array.length; i++) {
    array[i] = Double.valueOf(decimalFormat.format(array[i])); 
    }
    assertEquals("From: Portfolio line: 153", "[0.0, 0.88, 0.41, 0.25, 0.16, 0.11, 0.07, 0.04, 0.02, -0.0, -0.02, -0.03]", Arrays.toString(array)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAverage182 */
  @Test
  public void testAverage182() {    // Portfolio: 182
    exampleCompanies(); 
    assertEquals("From: Portfolio line: 185", 0.012, portfolio.average(Nokia.returns), 0.001); 
    double[] array = new double[]{ 1.5, 0, -1.5, -1.6} ; 
    double[] array2 = new double[]{ } ; 
    double[] array3 = new double[]{ 1.6, 5.9, 99, 6.45, 1.88} ; 
    assertEquals("From: Portfolio line: 189", -0.4, portfolio.average(array), 0.001); 
    assertEquals("From: Portfolio line: 190", 0.0, portfolio.average(array2), 0.001); 
    assertEquals("From: Portfolio line: 191", 22.966, portfolio.average(array3), 0.001); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPortfolioMarketValue212 
   * @throws Exception when error
   */
  @Test
  public void testPortfolioMarketValue212() throws Exception {    // Portfolio: 212
    exampleCompanies(); 
    double[] array = portfolio.portfolioMarketValue; 
    DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US); 
    DecimalFormat decimalFormat = new DecimalFormat("0.00", symbols); 
    for (int i = 0; i < array.length; i++) {
    array[i] = Double.valueOf(decimalFormat.format(array[i])); 
    }
    assertEquals("From: Portfolio line: 226", "[5175.0, 9750.0, 13725.0, 17100.0, 19875.0, 22050.0, 23625.0, 24600.0, 24975.0, 24750.0, 23925.0, 22500.0]", Arrays.toString(array)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPortfolioBeMe242 */
  @Test
  public void testPortfolioBeMe242() {    // Portfolio: 242
    exampleCompanies(); 
    portfolio.portfolioBeMe(0); 
    double[] array = portfolio.portfolioBeMe; 
    DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US); 
    DecimalFormat decimalFormat = new DecimalFormat("0.00", symbols); 
    for (int i = 0; i < array.length; i++) {
    array[i] = Double.valueOf(decimalFormat.format(array[i])); 
    }
    assertEquals("From: Portfolio line: 259", "[0.74, 0.53, 0.48, 0.47, 0.48, 0.51, 0.56, 0.63, 0.75, 0.94, 1.38, 3.5]", Arrays.toString(array)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetMinValue275 */
  @Test
  public void testGetMinValue275() {    // Portfolio: 275
    exampleCompanies(); 
    assertEquals("From: Portfolio line: 278", -0.03, portfolio.getMinValue(), 0.01); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetMaxValue292 */
  @Test
  public void testGetMaxValue292() {    // Portfolio: 292
    exampleCompanies(); 
    assertEquals("From: Portfolio line: 295", 0.88, portfolio.getMaxValue(), 0.01); 
  } // Generated by ComTest END
}