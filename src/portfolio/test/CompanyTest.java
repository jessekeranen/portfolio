package portfolio.test;
// Generated by ComTest BEGIN
import java.util.Arrays;
import java.io.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFRow;
import portfolio.Company;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import static org.junit.Assert.*;
import org.junit.*;
import portfolio.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.09.23 16:18:52 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class CompanyTest {


  // Generated by ComTest BEGIN  // Company: 13

  private Company Nokia; 


  public void exampleCompany() {
  String filename = "/Users/jessekeranen/CompanyTest.xlsx" ; 
  XSSFWorkbook workbook = new XSSFWorkbook(); 
  XSSFSheet sheet = workbook.createSheet("Prices"); 
  XSSFSheet sheet2 = workbook.createSheet("MarketValues"); 
  XSSFSheet sheet3 = workbook.createSheet("BookValues"); 
  XSSFSheet sheet4 = workbook.createSheet("Dividends"); 

  XSSFRow row = sheet.createRow(0); 
  row.createCell(0).setCellValue("Nokia"); 
  for(int i = 1; i < 13; i++){
       row = sheet.createRow(i); 
       row.createCell(0).setCellValue(i*11.05+i-i*i); 
  }

  XSSFRow row2 = sheet2.createRow(0); 
  row2.createCell(0).setCellValue("Nokia"); 
  for(int i = 1; i < 13; i++){
       row2 = sheet2.createRow(i); 
       row2.createCell(0).setCellValue(i*1100.05+i-i*i); 
  }

  XSSFRow row3 = sheet3.createRow(0); 
  row3.createCell(0).setCellValue("Nokia"); 
  for(int i = 1; i < 13; i++){
       row3 = sheet3.createRow(i); 
       row3.createCell(0).setCellValue(i*700.05+1000-i*i); 
  }

  XSSFRow row4 = sheet4.createRow(0); 
  row4.createCell(0).setCellValue("Nokia"); 
  for(int i = 1; i < 13; i++){
       row4 = sheet4.createRow(i); 
       row4.createCell(0).setCellValue(1*11.05-i*i); 
  }

   try{
   FileOutputStream fileOut = new FileOutputStream(filename); 
   workbook.write(fileOut); 
   fileOut.close(); 
   workbook.close(); 
   }catch( Exception e) {
        System.err.println(e.getMessage()); 
   }

  Nokia = new Company(sheet, sheet3, sheet2, sheet4, 0); 
  }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testReturns155 
   * @throws Exception when error
   */
  @Test
  public void testReturns155() throws Exception {    // Company: 155
    exampleCompany(); 
    assertEquals("From: Company line: 162", "Nokia", Nokia.name); 
    assertEquals("From: Company line: 163", 12, Nokia.returns.length); 
    double[] array = Nokia.returns; 
    DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US); 
    DecimalFormat decimalFormat = new DecimalFormat("0.00", symbols); 
    for (int i = 0; i < array.length; i++) {
    array[i] = Double.valueOf(decimalFormat.format(array[i])); 
    }
    assertEquals("From: Company line: 170", "[0.0, 0.82, 0.35, 0.19, 0.09, 0.03, -0.03, -0.08, -0.15, -0.25, -0.44, -0.95]", Arrays.toString(array)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testBeMeRatio185 
   * @throws Exception when error
   */
  @Test
  public void testBeMeRatio185() throws Exception {    // Company: 185
    exampleCompany(); 
    assertEquals("From: Company line: 192", "Nokia", Nokia.name); 
    assertEquals("From: Company line: 193", 12, Nokia.returns.length); 
    double[] array = Nokia.beMeRatios; 
    DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.US); 
    DecimalFormat decimalFormat = new DecimalFormat("0.00", symbols); 
    for (int i = 0; i < array.length; i++) {
    array[i] = Double.valueOf(decimalFormat.format(array[i])); 
    }
    assertEquals("From: Company line: 200", "[1.54, 1.09, 0.94, 0.86, 0.82, 0.79, 0.76, 0.75, 0.73, 0.72, 0.72, 0.71]", Arrays.toString(array)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAverage304 */
  @Test
  public void testAverage304() {    // Company: 304
    exampleCompany(); 
    assertEquals("From: Company line: 307", 0.012, Nokia.average(Nokia.returns), 0.001); 
    double[] array = new double[]{ 1.5, 0, -1.5, -1.6} ; 
    double[] array2 = new double[]{ } ; 
    double[] array3 = new double[]{ 1.6, 5.9, 99, 6.45, 1.88} ; 
    assertEquals("From: Company line: 311", -0.4, Nokia.average(array), 0.001); 
    assertEquals("From: Company line: 312", 0.0, Nokia.average(array2), 0.001); 
    assertEquals("From: Company line: 313", 22.966, Nokia.average(array3), 0.001); 
  } // Generated by ComTest END
}